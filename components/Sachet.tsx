/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations, useTexture } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { LoopPingPong, MeshStandardMaterial } from 'three'
type ActionName = 'animation_0'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Sachet_: THREE.Mesh
  }
  materials: {
    ['default.1']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Sachet(props: JSX.IntrinsicElements['group']) {
  const diffuseMap = useTexture('./textures/Sachet_Diffuse.jpg')
  diffuseMap.flipY = false
  const [active, setActive] = useState(false)
  const group =
    React.useRef<THREE.Group>() as React.MutableRefObject<THREE.Group>
  const { nodes, materials, animations } = useGLTF(
    '/models/Sachet .glb'
  ) as GLTFResult
  const { actions } = useAnimations(animations, group)
  const btn = document.querySelector('.btn')
  btn?.addEventListener('click', () => {
    setActive(!active)
  })

  useEffect(() => {
    actions?.animation_0?.play()
    actions?.animation_0?.setLoop(LoopPingPong, 2)

    actions?.animation_0?.reset()
  }, [active])
  return (
    <group ref={group} {...props} dispose={null} scale={[0.01, 0.01, 0.01]}>
      <group>
        <mesh
          name='Sachet_'
          castShadow
          receiveShadow
          geometry={nodes.Sachet_.geometry}
          material={materials['default.1']}
          position={[0, 0, 15.03]}
          rotation={[-Math.PI, 0, -Math.PI]}
          scale={0.3}
        >
          <meshStandardMaterial map={diffuseMap} />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/models/Sachet .glb')
